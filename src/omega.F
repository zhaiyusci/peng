**********************************ACQN**********************************
******************** TRANSPORT COLLISION INTEGRALS *********************
* CITATION: O'HARA, H. AND SMITH, F.J.
*   TRANSPORT COLLISION INTEGRALS FOR A DILUTE GAS.
*   COMP. PHYS. COMMUN. 2, 47 (1971).
**********************************ACQN**********************************
#include"param.h"
      SUBROUTINE GETOMEGA(OMEGADATA, TTT, NTNT, MM1, MM2)
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      DIMENSION OMEGADATA(MAXORD, MAXORD, 60)
      DIMENSION TTT(60)
      DOUBLE PRECISION :: MU, MASS1, MASS2, MM1, MM2
      COMMON/OMOM/Z(MAXORD),AA(MAXORD),D(MAXORD),EA(MAXORD),
     *OM(MAXORD,MAXORD),EB(MAXORD),ZZ(MAXORD),TIM,TIN
      COMMON/PIE/EMIN,EMAX,TMIN,TMAX,T(60),ACC,E(60),CO(33,MAXORD,3),
     *EC2,AX(5),NC(3),
     *NT,MAXL,MAXS,NE,KS
      COMMON/FEAT/ RMIN, EPS, SGM, MU, MASS1, MASS2

      MASS1=MM1
      MASS2=MM2

      CALL OMEGAPREPARE1

      BED = 1.D0
      PI=DACOS(-1.D0)
C
C  READ ENERGIES
C
      ! WE NOW HAVE INTEGRATION PARAMETERS DIRECTLY WRITTEN HERE
      NT=NTNT
      NE=5

      E(1:NE)=(/ 0.01, 0.1 , 1.0, 10.0, 100.0 /)

      DO I =1,NT
        T(I)=TTT(I)/EPS
      ENDDO

      MAXL=MAXORD
      MAXS=MAXORD
      ACC=1.0D-2

      WRITE(2,81) NE
      WRITE(2,83) (E(I),I=1,NE)

      WRITE(2,80) NT
      WRITE(2,83) (T(I),I=1,NT)
   80 FORMAT(1H //50X,I4,14H  TEMPERATURES ///)
   83 FORMAT(1H 7(1PD16.5))
   81 FORMAT(1H1//50X,I4,10H  ENERGIES ///)
      IF(NT.EQ.0) GO TO 5
      TMIN = T(1)
      TMAX = T(NT)
      ! EMIN AND EMAX ARE SET ACCORDING TO T
      EMAX = TMAX*(1.0+MAXS)/DSIN(PI/64.0)
      ZA = DSIN(PI/128.0)
      EMIN = 2.0*TMIN*ZA*ZA
      IF(NE.EQ.0) GO TO 6
      IF(E(1).LE.EMIN) EMIN=E(1)
      IF(EMAX.LE.E(NE)) EMAX=E(NE)
      GO TO 6
    5 EMIN=E(1)
      EMAX=E(NE)
    6 CONTINUE
      WRITE(2,33) TMIN,TMAX,EMIN,EMAX,ACC
   33 FORMAT(/6H TMIN= ,F10.4,4X,5HTMAX=,F10.4,4X,5HEMIN=,
     1D10.4,4X,5HEMAX=,D15.8,4X,9HACCURACY=,D15.8/)

      OMEGADATA = 0.D0

      CALL OMEGAPREPARE2
      DO I =1, NT
      CALL OMEGA(T(I))
      WRITE(12,*) "T(I), OM(1,1), OM(2,2)"
      WRITE(12,*) T(I), OM(1,1), OM(2,2)
      CALL OMEGA2OMEGA(OM,TTT(I))
      OMEGADATA(:,:,I)=OM
      ENDDO
      RETURN
      END SUBROUTINE


      DOUBLE PRECISION FUNCTION FACT(N)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: N
        FACT=GAMMA(N+1.0D0)
        RETURN
      END FUNCTION FACT

      SUBROUTINE OMEGA2OMEGA(OM,T)
      ! OMEGA* TO OMEGA, WHICH IS IN SI UNITS
      IMPLICIT NONE
      ! INTEGER, PARAMETER :: MAXORD=20
      DOUBLE PRECISION, PARAMETER :: PI=DACOS(-1.D0)
      DOUBLE PRECISION, PARAMETER :: KB=1.380649D-23 ! BY DEFINITION
      DOUBLE PRECISION, PARAMETER :: AMU=1.6605390666E-27 ! CODATA2018
      DOUBLE PRECISION, PARAMETER :: AA=1.D-10 ! BY DEFINITION
      DOUBLE PRECISION, INTENT(INOUT) :: OM(MAXORD, MAXORD)
      DOUBLE PRECISION, INTENT(IN) :: T
      DOUBLE PRECISION :: RMIN, EPS, SGM, MU, MASS1, MASS2
      COMMON/FEAT/ RMIN, EPS, SGM, MU, MASS1, MASS2
      INTEGER :: L, S
      DOUBLE PRECISION,EXTERNAL :: FACT
      WRITE(12,*) " FOR T[KELVIN] = ", T

      DO L=1,MAXORD
      DO S=L,MAXORD
      OM(L,S)=OM(L,S)*0.5D0*FACT(S+1)
     &  *(1.0D0-0.5D0*(1.D0+(-1.D0)**L)/(1.D0+L))*PI*(SGM*AA)**2 
     &  / DSQRT(2*PI*MU*AMU/(KB*T))
      ! WRITE(*,*) "L,S,MU, SGM", L,S, MU, SGM
      ENDDO
      ENDDO
      RETURN
      END SUBROUTINE OMEGA2OMEGA

      SUBROUTINE OMEGAPREPARE1
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      DOUBLE PRECISION :: MASS1, MASS2, MU

      COMMON/PIE/EMIN,EMAX,TMIN,TMAX,T(60),ACC,E(60),CO(33,MAXORD,3),
     *EC2,AX(5),NC(3),
     *NT,MAXL,MAXS,NE,KS
      COMMON/ORB/EE(150),OB(150),RO(150),ELC,RLC,OBED,EDO,EC,NO,KNO
      COMMON/PIKS/XX(11),KSI,ISK
      COMMON/FEAT/ RMIN, EPS, SGM, MU, MASS1, MASS2
      COMMON/OMOM/Z(MAXORD),AA(MAXORD),D(MAXORD),EA(MAXORD),
     *OM(MAXORD,MAXORD),EB(MAXORD),ZZ(MAXORD),TIM,TIN
      EXTERNAL POT, VF, VD

      CALL GETFEATURES(POT, RMIN, EPS, SGM) ! ON PEC
      MU=MASS1*MASS2/(MASS1+MASS2)

        WRITE(12,*) "2. FEATURES DONE."
C
C  SETUP,WHICH CALLS WAITS , CALCULATES THE PIVOTS AND WEIGHTS FOR THE
C  CLENSHAW-CURTISS QUADRATURE METHOD,USED IN THE EVALUATION OF ALL
C  INTEGRALS(SUBROUTINES INTEGRATE AND ENTEGRATE),REF.COMPUTER JOURNAL,
C  V11,P.213,1968.
C
        CALL SETUP
        WRITE(12,*) "2. SETUP DONE."


      END SUBROUTINE
C
        !!!!!!!!!!!
C  ORBIT COMPUTES CERTAIN PARAMETERS TO ENABLE THE COMPUTER TO DEAL WITH
C  ORBITING (JCP,V.41, P3560, 1964).

      SUBROUTINE OMEGAPREPARE2()
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      COMMON/PIE/EMIN,EMAX,TMIN,TMAX,T(60),ACC,E(60),CO(33,MAXORD,3),
     *EC2,AX(5),NC(3),
     *NT,MAXL,MAXS,NE,KS
      COMMON/ORB/EE(150),OB(150),RO(150),ELC,RLC,OBED,EDO,EC,NO,KNO
      COMMON/PIKS/XX(11),KSI,ISK
      DOUBLE PRECISION :: RMIN, EPS, SGM, MU, MASS1, MASS2
      COMMON/FEAT/ RMIN, EPS, SGM, MU, MASS1, MASS2
      COMMON/OMOM/Z(MAXORD),AA(MAXORD),D(MAXORD),EA(MAXORD),
     *OM(MAXORD,MAXORD),EB(MAXORD),ZZ(MAXORD),TIM,TIN
      EXTERNAL VF, VD
C
      ! CALL INPUT
      WRITE(12,*) "1. INPUT DONE."
      CALL ORBIT(EMIN,EMAX)
      WRITE(12,*) "3. ORBIT DONE."

C  WE NOW PRINT OUT THE ORBITING PARAMETERS(SEE ORBIT SUBROUTINE)
C
      EC2=10.0*EC
      WRITE(2,29)
   29 FORMAT(1H1,20X,19HORBITING PARAMETERS  ///)
      IF(NO.LE.0) GOTO 8
      ! IF(NO)8,8,300
      DO 1 I=1,NO
      OB(I) = OB(I)/DSQRT(EE(I))
    1 CONTINUE
      WRITE(2,5) (EE(I),OB(I),RO(I),I=1,NO)
    5 FORMAT(1H ,12X,1HE,18X,2HOB,18X,2HRO //(1H ,3D20.8))
      WRITE(2,55) EC,ELC,RLC,NO
   55 FORMAT(///1H ,3HEC=,D15.8,4X,4HELC=,D15.8,4X,4HRLC=,D15.8,4X,I3,
     1 21H  ENERGIES FROM ORBIT )
      WRITE(2,56)
   56 FORMAT(1H1)
    8 CONTINUE
      CALL ACQN()
C
C  OMEGA COMPUTES AND PRINTS OUT THE COLLISION INTEGRALS AND RATIOS
C
      CALL PREOMEGA
      END SUBROUTINE

      SUBROUTINE ACQN()
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      COMMON/PIE/EMIN,EMAX,TX(62),ACC,E(60),CO(33,MAXORD,3),
     *EC2,AX(5),NC(3),
     *NT,MAXL,MAXS,NE,KS
      COMMON/ORB/EE(150),OB(150),RO(150),ELC,RLC,OBED,EDO,EC,NO,KNO
      COMMON/PIKS/XX(11),KSI,ISK
      EXTERNAL VF,VD
C
C     THE COMMON BLOCK VARIABLES ARE EXPLAINED IN OTHER ROUTINES
C
      DIMENSION QEC(MAXORD),CF(33,MAXORD)
      NMAXI=32
      NQEC=0
      PI=DACOS(-1.D0)
      EDO=0.0
      OBED=0.0
      KNO = 0
      ELC = 0.0D0
      RLC = 0.0D0
      CF=0.0
C
C  WE CALCULATE THE CROSS SECTIONS DIFFERENTLY IN EACH OF THREE REGIONS:
C  (1)  EMIN TO EC; (2)  JUST ABOVE  EC ; (3)  WELL ABOVE EC. IN EFIT WE
C  CURVE-FIT THE LOG OF THE CROSS SECTIONS AGAINST LOG E WITH A
C  CHEBYSHEV POLYNOMIAL SERIES.THE COEFFICIENTS ARE KEPT IN CO, FOR
C  EACH L,AND EACH REGION.THESE ALSO PRINT OUT THE CROSS-SECTIONS AND
C  COEFFICIENTS
C
      ! IF(EMIN-1.1*EC)301,301,31
      IF(EMIN-1.1*EC .GE. 0) GOTO 31
      IF(EMIN.GT.0.5*EC)EMIN=0.5*EC
      IF (EMAX.LE.EC)  EC = EMAX
C
C  REGION 1
C
      EE1 = EMIN
      EE2 = EC
      NMINI=4
      CALL EFIT(EE1,EE2,NMINI,NMAXI,NIN,CF,ACC,MAXL,QEC,EQEC,NQEC)
      NC(1) = NIN
      DO 1332 J=1,NIN
      DO 32 L=1,MAXL
      CO(J,L,1)=CF(J,L)
   32 CONTINUE
 1332 CONTINUE
! 31    IF(EMAX-EC)35,35,302
31    IF(EMAX-EC.le.0) goto 35
! 302   IF(EMIN-EC2)303,36,36
      IF(EMIN-EC2.ge.0) goto 36
C
C  REGION 2
C
      NMINI = 8
      EE1 = EC
      EE2 = EC2
      CALL EFIT(EE1,EE2,NMINI,NMAXI,NIN,CF,ACC,MAXL,QEC,EQEC,NQEC)
      NC(2) = NIN
      DO 3137 J=1,NIN
      DO 37 L=1,MAXL
      CO(J,L,2)=CF(J,L)
   37 continue
 3137 continue
      IF(EMAX-EC2.le.0)then
        goto  35
      else
        goto 34
      endif
   36 EC2=EMIN
   34 CONTINUE
C
C  REGION 3
C
      EE1 = EC2
      EE2 = EMAX
      NMINI=4
      CALL EFIT(EE1,EE2,NMINI,NMAXI,NIN,CF,ACC,MAXL,QEC,EQEC,NQEC)
      NC(3) = NIN
      DO 1238 J=1,NIN
      DO 38 L=1,MAXL
      CO(J,L,3)=CF(J,L)
   38 CONTINUE
1238  CONTINUE
   35 CONTINUE
      WRITE(12,*) "4. FITTINGS DONE."
      END SUBROUTINE ACQN

C       SUBROUTINE INPUT
C C
C       IMPLICIT REAL*8 (A-H,O-Z)
C C     THIS READS IN THE DATA AND CALCULATES THE ENERGY RANGE
C C     WITHIN WHICH IT IS NECESSARY TO OBTAIN CROSSECTIONS
C C
C       INTEGER, PARAMETER :: MAXORD=20
C       INTEGER :: I
C       COMMON/PIE/EMIN,EMAX,TMIN,TMAX,T(60),ACC,E(60),
C      *XX1(33,MAXORD,3),XX2(6),
C      *NXX(3),NT,MAXL,MAXS,NE,KXX
C       DOUBLE PRECISION :: TTT(60)
C       COMMON/PIKS/XX(10),BED,KS(2)
C       COMMON/FEAT/ RMIN, EPS, SGM, MU, MASS1, MASS2
C       RETURN
C       END

      SUBROUTINE SETUP
      ! {{{
C
      IMPLICIT REAL*8 (A-H,O-Z)
C     THIS CALCULATES THE WEIGHTS,PIVOTS AND ERROR COEFFICIENTS FOR THE
C     CLENSHAW-CURTIS QUADRATURE. INFORMATION IS STORED IN THE COMMON
C     BLOCK !CLCU!
C
      DIMENSION A(130)
      COMMON/CLCU/X(127),WTS(261),X2(127),X4(127),COF(7),NA(7)
      PI=DACOS(-1.D0)
      C = DCOS(PI/256.0)
      S = DSIN(PI/256.0)
C  CALCULATE CLENSHAW-CURTIS PIVOTS
      CN = C
      SN = S
      DO 1 I = 1,63
      X(I) = CN
      X(128-I) = SN
      T = SN*C+CN*S
      CN = CN*C-SN*S
      SN = T
    1 continue
      X(64) = 0.7071067811865
C
C  CALCULATE WEIGHTS FROM ORDER 4 TO 256
      N = 4
      M = 64
      L = 1
      DO 3 NO = 1,7
      NA(NO) = L
C
C  NA(I) HOLDS THE STARTING POSITION WITHIN WTS OF WEIGHTS OF
C  DIFFERENT ORDERS
      CALL WAITS(A,N,X(M),X(128-M))
      NXX=N/2+1
      DO 2 I=1,NXX
      WTS(L) = A(I)
      L = L+1
    2 continue
      N = 2*N
      M = M/2
    3 continue
      DO 4 I = 1,127
      C = X(I)
      C = 2.0*C*C-1.0
      X2(I) = C
      X4(I) = 2.0*C*C-1.0
    4 CONTINUE
C
C  CALCULATE THE COEFFICIENTS COF(I) FOR THE CLENSHAW-CURTIS
C  ERROR ESTIMATE
      U = 4.0
      V = 16.0
      DO 5 I = 1,7
      COF(I) = 16.0*U/((V-9.0)*(V-1.0))
      U = 2.0*U
      V = 4.0*V
    5 CONTINUE
      COF(2) = 2.0*COF(2)
      RETURN
      END

      SUBROUTINE WAITS(A,N,C,S)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C  CALCULATES (N/2+1) WEIGHTS IN A(I) FOR CLENSHAW-CURTIS FORMULA
C  OF ORDER N.  S HOLDS SIN(PI/N); C HOLDS COS(PI/N)
C
       DIMENSION A(130)
      RN=N
      Z=.2D1/(RN**2-.1D1)
      A(1) = 0.5*Z
      W = -1.0
      SJ = S
      CJ = C
      NXA=N/2
      DO 2 J=1,NXA
      C2J = 1.0-2.0*SJ**2
      S2J = 2.0*SJ*CJ
      SUM = 0.0
      DIV = 1.0
      SN = SJ
      CN = CJ
      DO 1 I=1,NXA
      SUM = SUM + SN/DIV
      DIV = DIV + 2
      T = SN*C2J + CN*S2J
      CN = CN*C2J - SN*S2J
      SN = T
    1 continue
      A(J+1) = Z*W + 4.0*SJ*SUM/N
      W = -W
      T= SJ*C + CJ*S
      CJ = CJ*C - SJ*S
      SJ = T
    2 continue
      RETURN
      END

      ! }}} 
      ! END OF SETUP AND WAITS

      SUBROUTINE ORBIT(EMIN,EMAX)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/ORB/E(150),OB(150),RO(150),ELC,RLC,OBED,EDO,EC,N,KNO
      EXTERNAL VF,VD
C
C  THIS ROUTINE SCANS THE POTENTIAL AND DETERMINES IF THERE IS ANY
C  ORBITING FOR E ABOVE EMIN,THE MINIMUM ENERGY NEEDED.IF THERE IS ,
C  IT COMPUTES APPROXIMATELY THE RANGE OF ENERGIES AT WHICH ORBITING
C  OCCURS, E(1) UP TO E(N), WHERE EC = E(N)  (AND IF THE POTENTIAL HAS
C  A LONG RANGE MAXIMUM,ELC=E(1) ).IT ALSO CALCULATES THE CORRESPONDING
C  ORBITING IMPACT PARAMETER OB AND THE ORBITING INTERNUCLEAR SEPARATION
C
      DEL=1.02
      K=0
      X = 0.1
    4 Y=0.5*VD(X)*X*X*X
C
C   WE SCAN TILL VD IS POSITIVE
C
      IF(Y.le.0) goto 1
      Q = DSQRT(Y)
      K=1
      Z=VF(X)+Q*Q/(X*X)
C
C   WE SCAN TILL THE EFFECTIVE POTENTIAL IS POSITIVE
C
      IF(Z.le.0) goto 10
      X1=X*1.05
      Z1=VF(X1)+VD(X1)*X1/2.0
C
C   WE CHECK THAT THE EFFECTIVE POTENTIAL IS DECREASING
C
      IF(Z1.GT.Z) GO TO 10
C
C   UNTIL IT IS LESS THAN EMIN
C
      IF(Z-EMIN.le.0) then
        goto 3
      else
        goto 10
      endif
C
C   IF VD WAS SUCCESSIVELY NEGATIVE ,POSITIVE,NEGATIVE, THE POTENTIAL
C   HAS A MAXIMUM; GO TO 10
C
    1 IF(K.EQ.1) GO TO 11
  10  X=X*1.05
C
C   IF VD NEGATIVE TILL R GREATER THAN 10000 WE PUT EC = 0
C
      IF(1.0E+04.le.X) then
        goto 24
      else
        goto 4
      endif
C
C   WE NOW BEGIN INCREASING RO IN SMALL STEPS
C
    3 E(1)=Z
      OB(1)=Q
      RO(1)=X
   12 I=2
    8 RO(I)=RO(I-1)/DEL
      RRO=RO(I)
      Y=0.5*VD(RRO)*RRO*RRO*RRO
C
C   UNTIL VD IS NEGATIVE (UNLIKELY)
C
      IF(Y.le.0) goto 5
      OB(I) = DSQRT(Y)
      R=RO(I)
      Q=OB(I)
      E(I)=VF(R)+Q*Q/(R*R)
C
C   OR UNTIL OB DECREASES
C
      IF(OB(I).le.OB(I-1)) goto 5
      I=I+1
      IF(I .lt. 150) then
       goto 8
       else
       goto 9
      endif
    5 N=I-1
C
C   THEN WE HAVE EC
C
      EC=E(N)
C
C   WE NOW ENSURE N IS NOT TOO SMALL OR TOO LARGE
C
      IF(N.GT.20) RETURN
      DEL=DEL**(1./3.)
      GO TO 12
   42 DEL=DEL*DEL*DEL
      GO TO 12
    9 IF(EMAX.ge.E(149)) goto 42
      EC=E(149)
      N=I-1
C
C   BECAUSE IT IS USUALLY UNLIKELY THAT EMAX IS LESS THAN EC,
C   THIS IS WRITTEN OUT
C
      WRITE(2,82) EC
   82 FORMAT(21H0EMAX LESS THAN EC = D12.5,5X,16HTHIS IS UNLIKELY  )
      RETURN
   24 EC=0.0
      IF(Z.lt.0) goto 99
      RETURN
   99 WRITE(2,97)Z,X,Q
   97 FORMAT(33H0 ORBIT FAILURE,NEGATIVE ENERGIES 3D20.9)
      STOP
C
C   IF THE POTENTIAL HAS A MAXIMUM ,ITS POSITION RLC AND ITS HEIGHT ELC
C   ARE DETERMINED ACCURATELY
C
   11 X1=X/1.05
      X2=X
      Y1=VD(X1)
      Y2=VD(X2)
      DO 33 K=1,10
      TX=(X1*Y2-X2*Y1)/(Y2-Y1)
      TY=VD(TX  )
      IF(TY .lt. 0) then 
        goto 30
      elseif(TY .eq. 0) then
        goto 31
      else
        goto 32
      endif
   32 X1=TX
      Y1=TY
      GO TO 33
   30 X2=TX
      Y2=TY
   33 CONTINUE
   31 RLC=TX
      ELC=VF(RLC)
      E(1)=ELC
      RO(1)=RLC
      OB(1)=0.0
      GO TO 12
      END

      SUBROUTINE ORBE(E,OB,RO)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C  THIS ROUTINE CALCULATES THE ORBITING PARAMETERS OB AND RO FOR ANY
C  ENERGY E
C     VARIABLES IN !ORB! BLOCK HOLD ORBITING VALUES OBTAINED IN
C     ROUTINE ORBIT.
C
      COMMON/ORB/EE(150),OBB(150),ROO(150),ELC,RLC,OBED,EDO,EC,NO,KNO
      DATA RM/0.0D0/
      EXTERNAL VF,VD
      EC9 = 1000.0*EC
      EC2 = 3.0*EC
      IF(E.lt.EC2)  goto 2
C
C  HERE WE COMPUTE OB FOR E BELOW ELC AND FOR E WELL ABOVE EC
C
    5 IF(NO.GT.0)  OB = ROO(NO)
      IF (E.LE.ELC)  OB = 0.0
      IF (E.GT.EC9)  OB = 0.0
      RO=0.0
      RETURN
    2 IF(E.gt.EC) goto 3
      IF(E.le.ELC) goto 5
C
C  WE COMPUTE OB AT ORBITING ENERGIES
C
      CALL INTERP(E,RO,EE,ROO,NO,KNO)
      VDRO=VD(RO)
      EOLD=E
      E=VF(RO)+VD(RO)*RO*0.5
      OB = DSQRT(0.5*RO*VDRO)*RO
      OB = OB/DSQRT(E)
      IF (DABS(E-EOLD).GT.0.0001*E) GO TO 6
      RETURN
    6 WRITE(2,7) E,EOLD,RO
    7 FORMAT(58H WHEN CALCULATING ORBITING PARAMETERS CHANGE IN E IS LAR
     1GE /3H E=,D15.8,4X,5HEOLD=,D15.8,4X,3HRO=,D15.8 )
      RETURN
C
C  HERE WE COMPUTE THE POSITION OB OF THE MINIMUM ANGLE WHEN E IS
C  JUST GREATER THAN EC
C
    3 RAT = 1.015
      THE=0.0
      IF(OBED.EQ.0.0) OBED=OBB(NO)
      IF(E.LE.EDO) GO TO 23
   27 CALL MINIM(0.0D0,0.0D0,E,OBED,RM)
      CALL ANGLE(E,OBED,0.0D0,RM,THETA,EC)
      IF(THE.EQ.0.0) THE=THETA
      IF(THETA.gt.THE) goto 21
      OBED=OBED/RAT
      THE=THETA
      GO TO 27
   23 OBED=0.0
      EDO=0.0
      GO TO 3
   21 CONTINUE
      EDO=E
      OB = OBED * RAT
C
C  WE CALCULATE THE EQUIVALENT RO
C
      CALL MINIM(0.0D0,0.0D0,E,OB,RO)
      RETURN
      END
      SUBROUTINE EFIT(E1,E2,NMIN,NMAX,N,C,ACC,MAXL,QEC,EQEC,NQEC)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C     THIS CALCULATES CROSSECTIONS IN THE ENERGY REGION(E1,E2) AND FITS
C     A CHEYSHEV SERIES; ACC IS THE ACCURACY REQUIRED.
C     BLOCK!ORB!HOLDS ORBITING PARAMETER VALUES.
C     VARIABLES IN !QECN! BLOCK ARE USED TO ENSURE THAT CROSSECTIONS
C     AT START OF ONE REGION ARE THOSE AT END OF PREVIOUS REGION.
C  NMIN ,NMAX ARE NO OF INTERVALS , C  CONTAINS THE COEFFICIENTS,
C  N IS NO OF COEFFICIENTS AT END
C
      DIMENSION C(33,MAXL),QA(MAXL),E(33),QB(33),X(33),
     * Q(33,MAXL),XB(33),EEB(33)
     1,EEXP(33),QEC(MAXL)
      COMMON/ORB/XXX(450),ELC,RLC,OBED,DUM,EC,NORB,KDUM
      EXTERNAL VF,VD
      ! WRITE(*,*) "E1, E2"
      ! WRITE(*,*) E1, E2
      PI=DACOS(-1.D0)
      EACC=ACC
      NM=NMIN
      RNM=NM
      OBED=0.0
      EA=DLOG(E1)
      EB=DLOG(E2)
      EBPA=EB+EA
      EBMA=EB-EA
      N=NM+1
      IF(NQEC.EQ.0) GO TO 13
      NSTART=2
      X(1)=-1.
      E(1)=EQEC
      DO 15 L=1,MAXL
      Q(1,L)=QEC(L) 
   15 continue
      GO TO 16
   13 NSTART=1
   16 CONTINUE
C
C  CALCULATE THE CROSS-SECTIONS
C
      DO 198 I=NSTART,N
      RIM1=I-1
      X(I)=DCOS(RIM1*PI/RNM)
      X(I)=-X(I)
      E(I)=(EBMA*X(I)+EBPA)/2.0
      EE=DEXP(E(I))
      CALL ORBE(EE,OB,RO)
      CALL CROSSI(EE,EACC,OB,RO,EC,MAXL,QA)
      DO 8 L=1,MAXL
      Q(I,L)=DLOG(QA(L))
    8 CONTINUE
  198 CONTINUE
      DO 14 L=1,MAXL
      QEC(L)=Q(N,L)
   14 CONTINUE
      NQEC=1
      EQEC=E(N)
   11 CONTINUE
C
C  WRITE OUT CROSS-SECTIONS
C
      WRITE(2,55)
   55 FORMAT(1H1)
      WRITE(2,51)
   51 FORMAT(////52X,15H CROSS-SECTIONS  /// 7X,
     12H E,14X,3HL=1,13X,3HL=2,13X,3HL=3,13X,3HL=4,13X,3HL=5,13X,3HL=6)
      DO 52 I=1,N
      DO 99 L=1,MAXL
      QA(L)=DEXP(Q(I,L))
   99 continue
      EEXP(I)=DEXP(E(I))
      WRITE(2,54) EEXP(I),(QA(L),L=1,MAXL)
   54 FORMAT(7D16.8)
   52 CONTINUE
C
C  CALCULATE THE CHEBYSHEV COEFFICIENTS
C
      DO 109 J=1,N
      DO 9 L=1,MAXL
      C(J,L)=0.0
    9 continue
  109 continue
      DO 207 J=1,N
      DO 107 I=1,N
      CALL CHEB(X(I),J,TJ)
      DO 7 L=1,MAXL
      IF(I.EQ.1 .OR.I .EQ. N) GO TO 17
      C(J,L)=C(J,L)+TJ*Q(I,L)*2.0/RNM
      GO TO 7
C
C  HALVE THE FIRST AND LAST COEFFICIENTS
C
   17 C(J,L)=C(J,L)+TJ*Q(I,L)/RNM
    7 CONTINUE
  107 CONTINUE
  207 CONTINUE
C
C  WRITE OUT  COEFFICIENTS
C
      WRITE(2,78)NM
   78 FORMAT(////30X,52H CHEBYSHEV CURVE FIT ,COEFFICIENTS FOR L=1,MAXL;
     1 NM= ,I4////9X,4H L=1,14X,3HL=2,15X,3HL=3,15X,3HL=4,15X,3HL=5,15X,
     2 3HL=6 ///)
      DO 10 J=1,N
      WRITE(2,77)(C(J,L),L=1,MAXL)
   77 FORMAT(6F18.8)
   10 CONTINUE
      QUOT=RNM/2.0
      EST=(DABS(C(N,1))+DABS(C(N-1,1)))/QUOT
C
C  IF ERROR IS SMALL ENOUGH RETURN
C
      IF(EST.LE.ACC) RETURN
      IF(NM.lt.NMAX) goto 6
      RETURN
C
C  ELSE DOUBLE NUMBER OF CROSS-SECTIONS
C
    6 DO 124 L=1,MAXL
      DO 5 I=1,N
      QB(I)=Q(I,L)
    5 continue
      DO 4 I=1,N
      II=2*I-1
C
C  STORE OLD CROSS-SECTIONS
C
      Q(II,L)=QB(I)
    4 CONTINUE
  124 CONTINUE
      DO 44 I=1,N
      XB(I)=X(I)
      EEB(I)=E(I)
   44 continue
      DO 45 I=1,N
      II=2*I-1
      X(II)=XB(I)
      E(II)=EEB(I)
   45 continue
      NM=2*NM
      RNM=NM
      N=NM+1
      OBED=0.0
C
C  CALCULATE NEW CROSS-SECTIONS
C
      DO 103 I=2,N,2
      RIM1=I-1
      X(I)=DCOS(RIM1*PI/RNM)
      X(I)=-X(I)
      E(I)=(EBMA*X(I)+EBPA)/2.0
      EE=DEXP(E(I))
      CALL ORBE(EE,OB,RO)
      CALL CROSSI(EE,EACC,OB,RO,EC,MAXL,QA)
      DO 3 L=1,MAXL
      Q(I,L)=DLOG(QA(L))
    3 CONTINUE
  103 CONTINUE
      GO TO 11
      END
      SUBROUTINE CROSSI(E,ACC,OB,RO,EC,LMAX,QA)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C     THIS CALCULATES,TO AN ACCURACY ACC,THE CROSSECTIONS AT ENERGY E WH
C     IF<EC,THE ORBITING PARAMETERS ARE OB AND RO.
C     BLOCK !CSUC! TRANSMITS VALUES TO THE ROUTINES CS,CSA,ETC. WHICH DE
C     THE CROSSECTION INTEGRAL INTEGRAND KSI,ISK ARE MARKERS FOR
C     INTEGRATING ROUTINE.
C     BED IS DEFINED BELOW.
C
      DIMENSION QA(LMAX),X1(LMAX),X2(LMAX),EA(LMAX),EB(LMAX)
      COMMON/PIKS/XX1,BCC,EE,OBB,ROO,ECC,XX(4),BED,KSI,ISK
      EXTERNAL CS,CSA,CSINF,DINF,SENF,AFTERF,RMFUN, VF,VD
C
      DATA PEE/0.0D0/
      DATA RM/0.0D0/
C  IF E DECREASES WE RESET THE PARAMETERS RM AND BED
C
      PI=DACOS(-1.D0)
      IF (E.LE.PEE)   RM = 0.0
      IF (E.LE.PEE)  BED = 1.0
       NMIN = 8
      ITEST=0
      PEE = E
C  WE SET THE OTHER PARAMETERS
      ACC1=0.8*ACC
      ISK = 1
      HPI = 0.5*PI
      KSI = 1
      TIM = 0.0
      TIN = 1.0
      BCC = ACC
      EE=E
C  PARAMETERS SET FOR CSUC COMMON
      ROO = RO
      OBB = OB
      ECC = EC
      DO 1 L = 1,LMAX
      X1(L) = 0.0D0
      X2(L) = 0.0D0
      EA(L) = 0.0D0
      EB(L) = 0.0D0
    1 continue
      IF(OB.gt.0) goto 2
C
C  IF OB = 0 WE FIND BED WHERE THE DEFLECTION ANGLE = PI/2.0
C
      RAT = 2.0
      NRAT=0
   28 NBED=0
   27 CALL MINIM(OB,RO,E,BED,RM)
      CALL ANGLE(E,BED,OB,RM,THETA,EC)
      IF(THETA.eq.PI/2.0) goto 24 
      IF(THETA.gt.PI/2.0) goto 23 
      BED=BED/RAT
       IF(NBED.lt. 0 ) goto 24 
       IF(NBED.gt. 0 ) goto 27 
      NBED = 1
       GO TO 27
   23 BED=BED*RAT
      IF(NBED .lt. 0)  goto 27
      IF(NBED .gt. 0)  goto 24
      NBED = -1
      GO TO 27
   24  CONTINUE
      IF(NRAT.EQ.1) GO TO 29
      NRAT=1
      RAT=1.1
      GO TO 28
   29 CONTINUE
C
C  WE NOW INTEGRATE OVER B USING DIFFERENT METHODS IN DIFFERENT REGIONS
C
      ISK=1
      KSI=1
      CALL INTEGR(TIM,BED,ACC,X1,LMAX,2,EA,EB,SENF,8,128,IOK)
      IF(IOK.GT.ITEST) ITEST=IOK
      ISK = 2
      CALL INTEGR(TIM,TIN,ACC,X2,LMAX,2,EA,EB,AFTERF,8,256,IOK)
      IF(IOK.GT.ITEST) ITEST=IOK
      ISK = 1
      KSI = 1
      GO TO 4
    2 IF(E.GT.EC) GO TO 50
      IF(DABS(E-EC).GT.1.0D-4*EC) GO TO 31
      CALL INTEGR(TIM,HPI,ACC1,X1,LMAX,4,EA,EB,CS,32,128,IOK)
      GO TO 32
   31 CONTINUE
      CALL INTEGR(TIM,HPI,ACC1,X1,LMAX,4,EA,EB,CS,8,128,IOK)
      IF(IOK.GT.ITEST) ITEST=IOK
      GO TO 52
  50  IF(E.gt.3.0*EC) goto 53
      IF (DABS(E-EC).LE.1.0D-4*EC) NMIN = 32
      ISK = 1
      KSI = 1
      BOB=OB
      IF (DABS(E-EC).LE.1.0D-4*EC) BOB=OB*0.999999999
      CALL MINIM(OB,RO,E,BOB,ROD)
      BTEMP=0.0D0
      CALL MINIM(OB,ROD,E,BTEMP,RM1)
      CALL INTEGR(RM1,ROD,ACC1,X1,LMAX,1,EA,EB,RMFUN,NMIN,128,IOK)
   32 CONTINUE
      IF(IOK.GT.ITEST) ITEST=IOK
      DO 51 L = 1,LMAX
      EA(L) = 0.0
      EB(L) = 0.0
   51 continue
   52 KSI = 2
      CALL INTEGR(TIM,HPI,ACC,X2,LMAX,4,EA,EB,CSINF,NMIN,128,IOK)
      IF(IOK.GT.ITEST) ITEST=IOK
      GO TO 4
  53  CALL INTEGR(TIM,TIN,0.1*ACC,X1,LMAX,2,EA,EB,CSA,8,128,IOK)
      IF(IOK.GT.ITEST) ITEST=IOK
      DO 10 L = 1,LMAX
      EB(L) = 0.0
   10 CONTINUE
      KSI = 2
      CALL INTEGR(TIM,HPI,ACC,X2,LMAX,4,EA,EB,DINF,8,8,IOK)
      RATIO=X2(1)/X1(1)
      IF(RATIO.LE.0.4*ACC) GO TO 12
      ACC2=0.2*ACC /RATIO
      KSI = 2
      CALL INTEGR(TIM,HPI,ACC2,X2,LMAX,4,EA,EB,DINF,8,128,IOK)
      IF(IOK.GT.ITEST) ITEST=IOK
      KSI = 1
   12 CONTINUE
      ISK = 1
    4 DO 5 L = 1,LMAX
      QA(L) = 2.0*PI*(X1(L)+X2(L))
    5 continue
      IF(ITEST.LE.2) RETURN
      WRITE(2,48) E
   48 FORMAT(46H AN INTEGRAL HAS NOT CONVERGED AT AN ENERGY E= ,D20.10/
     1114H IF THIS OCCURS AT THE VERY HIGHEST OR LOWEST ENERGIES ONLY,IT
     2 WILL NOT AFFECT THE COLLISION INTEGRALS BY TOO MUCH  )
      RETURN
      END
      SUBROUTINE 
     *      INTEGR(AA,B,ACC,ANS,LMAX,NEND,EA,EB,F,NMIN,NMAX,IOK)
C
C  INTEGRATES FROM AA TO B THE LMAX FUNCTIONS IN F TO A RELATIVE
C  ACCURACY ACC; LMAX RESULTS IN ARRAY ANS
C  NMIN AND NMAX = MINIMUM AND MAXIMUM INTEGRATING ORDERS ACCEPTABLE
C  IOK INDICATES CONDITIONS UNDER WHICH RESULTS ACCEPTED
C  IOK = 1 MEANS CHECK SATISFIED
C  IOK = 2 MEANS CHECK NOT SATISFIED BY 0.1*ACCURACY FOUND
C  IOK = 3 MEANS REACHED MAXIMUM ORDER UNSATISFIED
C  NEND INDICATES IF INTEGRAND IS KNOWN AT END POINTS
C  NEND = 1 MEANS BOTH ENDS UNKNOWN
C  NEND = 2 MEANS  B  END  UNKNOWN
C  NEND = 3 MEANS  A  END  UNKNOWN
C  NEND = 4 MEANS BOTH ENDS KNOWN
C  EA AND EB CONTAIN VALUES OF INTEGRAND AT END POINTS
C  KSI = 1 MEANS USE ALL PIVOTS
C  KSI = 2 MEANS USE POSITIVE PIVOTS ONLY
C  ISK = 2 MEANS USE CONSERVATIVE ERROR ESTIMATE; OTHERWISE ISK = 1
C
C     !CLCU! BLOCK VALUES HOLD CLENSHAW-CURTIS WEIGHTS AND PIVOTS ETC.
C     !RMBLOCK! BLOCK TRANSMITS RM VALUE TO AND FROM ROUTINES DEFINING
C     THE CROSSECTION INTEGRAL INTEGRAND.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/CLCU/X(127),WTS(261),X2(127),X4(127),COF(7),NA(7)
      DIMENSION EA(LMAX),EB(LMAX),ANS(LMAX),QA(LMAX),END(LMAX)
     *   ,CENT(LMAX),FUN(127,LMAX),QB(LMAX)
      COMMON/PIKS/RM,XX(10),KSI,ISK
      EXTERNAL VF,VD
      IL = 2
      IF(LMAX.EQ.1)IL = 1
      IOK = 1
      A = AA
      IF(ISK.EQ.2)IOK = 2
      IF(KSI.EQ.2) A=-B
      ERR = ACC
      HAF = 0.5*(B-A)
      AMID = 0.5*(B+A)
      IF(KSI.EQ.2) GO TO 51
      GO TO(313,1,2,3),NEND
313   CONTINUE
      CALL F(A,EA,LMAX)
    1 CONTINUE
      CALL F(B,EB,LMAX)
      GO TO 3
    2 CONTINUE
      CALL F(A,EA,LMAX)
    3 GO TO 58
   51 GO TO(314,53,52,54),NEND
314   CONTINUE
      CALL  F(B,EB,LMAX)
   52 CONTINUE
      CALL F(AMID,CENT,LMAX)
      GO TO 56
   53 CONTINUE
      CALL F(B,EB,LMAX)
   54 CONTINUE
      DO 55 L = 1,LMAX
      CENT(L) = EA(L)
   55 continue
   56 DO 57 L = 1,LMAX
      EA(L) = EB(L)
   57 continue
   58 RM = 0.0
      ZA = HAF*X(64)
      ZB = AMID - ZA
      ZA = AMID + ZA
      CALL F(ZA,QA,LMAX)
      GO TO(26,315),KSI
315   DO 23 L = 1,LMAX
      QB(L) = QA(L)
   23 continue
      GO TO 27
   26 CONTINUE
      CALL F(ZB,QB,LMAX)
      CALL F(AMID,CENT,LMAX)
   27 CONTINUE
C
C  PREANS AND PREST ARE INTEGRAL AND ERROR ESTIMATES OF ORDER 4
C
      RM = 0.0
      DO 4 L = 1,LMAX
      FUN(1,L) = QA(L) + QB(L)
      END(L) = EA(L)+EB(L)
    4 continue
      PREANS = HAF*(WTS(1)*END(IL)+WTS(2)*FUN(1,IL)+WTS(3)*CENT(IL))
      PREST = 32.0*HAF*DABS(0.5*END(IL)-FUN(1,IL)+CENT(IL))/105.0
      PREST = PREST/PREANS
      NORDER = 2
      N = 8
    9 LC = N/4-1
      LA = 2*LC
      LB = LC
      DO 6 J = 1,LB
      DO 5 L = 1,LMAX
      FUN(LA,L) = FUN(LC,L)
      FUN(LA+1,L) = 0.0
    5 continue
      LA = LA -2
      LC = LC - 1
    6 continue
      DO 17 L = 1,LMAX
      FUN(1,L) = 0.0
   17 continue
      LA = 1
      LB = 256/N
      W = -1.0
      NW = 1
      DO 18 JJ = 1,2
      NXB=N/4
      DO 108 J=1,NXB
      IF(KSI.EQ.2.AND.JJ.EQ.1)GO TO 8
      P = HAF*X(LA*LB)
      ZA = AMID + W*P
      CALL F(ZA,QA,LMAX)
      DO 7 L = 1,LMAX
      IF(KSI.EQ.2) GO TO 28
       FUN(LA,L) = FUN(LA,L) + QA(L)
      GO TO 7
   28 FUN(LA,L) = 2.0*QA(L)
    7 CONTINUE
    8 LA = LA + 2*NW
  108 CONTINUE
      LA = LA - 2
      W = -W
      NW = -NW
   18 continue
C
C  GETTING INTEGRAL ESTIMATE OF ORDER N
C
      RM = 0.0
      M = NA(NORDER)
      DO 11 L = 1,LMAX
      ANS(L) = WTS(M)*END(L)+WTS(M+N/2)*CENT(L)
   11 continue
      AN = 0.5*END(IL)+CENT(IL)
      AN2 = 0.5*END(IL) - CENT(IL)
      AN4 = AN
      W = -1.0
      NXC=N/2-1
      DO 112 J=1,NXC
      AN = AN + W*FUN(J,IL)
      AN2 = AN2 + W*X2(J*LB)*FUN(J,IL)
      AN4 = AN4 + W*X4(J*LB)*FUN(J,IL)
      W = -W
      DO 12 L = 1,LMAX
      ANS(L) = ANS(L)+WTS(M+J)*FUN(J,L)
   12 continue
  112 continue
      AN=2.0*HAF*DABS(AN)/N
      AN2 = HAF*DABS(AN2)/N
      AN4 = 0.25*HAF*DABS(AN4)/N
      DO 13 L = 1,LMAX
      ANS(L) = HAF*ANS(L)
   13 continue
C
C  GETTING ERROR ESTIMATE
C
      AMAX = AN
      IF(AN2.GT.AMAX)AMAX = AN2
      IF(AN4.GT.AMAX) AMAX = AN4
      EST = COF(NORDER)*AMAX
      IF(ISK.EQ.2)EST=DABS(ANS(IL)-PREANS)
      EST = DABS(EST/ANS(IL))
      IF(N.lt.NMIN) goto 16
   14 IF(EST.gt.ERR) goto 16
      GO TO(15,318),IOK
318   GOTO(32,319),KSI
319   DO 29 L = 1,LMAX
      ANS(L) = 0.5*ANS(L)
   29 continue
      N = N/2
   32 CONTINUE
      RETURN
   15 IF(AN.LE.AN2.AND.DABS(1.0-ANS(IL)/PREANS).LE.PREST) GO TO 35
      GO TO 36
   35 CONTINUE
      GO TO (34,320),KSI
320   DO 31 L = 1,LMAX
      ANS(L) = 0.5*ANS(L)
   31 continue
      N = N/2
   34 CONTINUE
      RETURN
   36 CONTINUE
      ERR = 0.1*ERR
      IOK = 2
      GO TO 14
   16  N = 2*N
      PREST = EST
      PREANS = ANS(IL)
      NORDER = NORDER + 1
      IF(N .le. NMAX) goto 9
      IOK = 3
      GO TO(33,322),KSI
322   DO 30 L = 1,LMAX
      ANS(L) = 0.5*ANS(L)
   30 continue
      N = N/2
   33 CONTINUE
      RETURN
      END
      SUBROUTINE RMFUN(Y,FUN,LMAX)
C
C  CROSS-SECTION INTEGRAND FOR (0,OB) FOR (EC .LE. E .LE. 3*EC) AFTER
C  CHANGE FROM B TO RM
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION FUN(LMAX)
      COMMON/PIKS/XX1(2),E,OB,RO,EC,XX2(5),KXX(2)
      EXTERNAL VF,VD
      VFY = VF(Y)
      B= Y*DSQRT(DABS(1.0-VFY/E))
      CALL ANGLE(E,B,OB,Y,THETA,EC)
      ZA = DSIN(0.5*THETA)
      ZB = Y*(1.0-(VFY+0.5*Y*VD(Y))/E)
      ZB = 2.0*ZA*ZA*ZB
      ZC = DCOS(THETA)
      ZD = 0.0
      DO 1 L = 1,LMAX
      ZD = ZB + ZC*ZD
      FUN(L) = ZD
    1 continue
      RETURN
      END
      SUBROUTINE CS(X,FUN,LMAX)
C
C  CROSS-SECTION INTEGRAND IN (0,OB) FOR (E.LE. EC)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION FUN(LMAX)
      COMMON/PIKS/RM,XX1,E,OB,RO,EC,XX2(5),KX(2)
      EXTERNAL VF, VD
      ZB = OB*DSIN(X)
      ZC = OB*DCOS(X)
      CALL MINIM(OB,RO,E,ZC,RM)
      CALL ANGLE(E,ZC,OB,RM,THETA,EC)
      ZA = DSIN(0.5*THETA)
      ZD = 2.0*ZC*ZA*ZA
      ZB = ZD*ZB
      ZC = DCOS(THETA)
      ZD=0.0
      DO 1 L=1,LMAX
      ZD=ZB+ZC*ZD
      FUN(L)=ZD
    1 continue
      RETURN
      END
      SUBROUTINE CSA(X,FUN,LMAX)
C
C  CROSS-SECTION INTEGRAND IN (0,OB)  FOR (E > 3*EC )
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION FUN(LMAX)
      COMMON/PIKS/RM,XX1,E,OB,RO,EC,XX2(5),KX(2)
      EXTERNAL VF,VD
      ZC = OB*X
      CALL MINIM(OB,RO,E,ZC,RM)
      CALL ANGLE(E,ZC,OB,RM,THETA,EC)
      ZA = DSIN(0.5*THETA)
      ZB = 2.0*ZC*ZA*ZA*OB
      ZC = DCOS(THETA)
      ZD = 0.0
      DO 1 L = 1,LMAX
      ZD = ZB + ZC*ZD
      FUN(L) = ZD
    1 continue
      RETURN
      END
      SUBROUTINE DINF(Y,FUN,LMAX)
C
C  CROSS-SECTION INTEGRAND FOR (B > OB ) FOR (E > 3*EC )
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION FUN(LMAX)
      COMMON/PIKS/RM,XX1,E,OB,RO,EC,XX2(5),KX(2)
      EXTERNAL VF,VD
      X = Y
      IF(Y.LT.0.0)X=-Y
      IF(X.gt. 0) goto 3
      DO 2 L = 1,LMAX
      FUN(L) = 0.0
    2 continue
      RETURN
    3 CONTINUE
      ZC = DSIN(X)
      ZB = OB*DCOS(X)/(ZC*ZC)
      ZC = OB/ZC
      CALL MINIM(OB,RO,E,ZC,RM)
      CALL ANGLE(E,ZC,OB,RM,THETA,EC)
      ZA = DSIN(0.5*THETA)
      ZB = 2.0*ZC*ZA*ZA*ZB
      ZC = DCOS(THETA)
      ZD = 0.0
      DO 1 L = 1,LMAX
      ZD = ZB + ZC*ZD
      FUN(L) = ZD
    1 continue
      RETURN
      END
      SUBROUTINE CSINF(Y,FUN,LMAX)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C  CROSS-SECTION INTEGRAND FOR (B > OB ) FOR (E .LE. 3*EC )
C
      DIMENSION FUN(LMAX)
      COMMON/PIKS/XX1(2),E,OB,RO,EC,XX2(5),KX(2)
      EXTERNAL VF,VD
      X = 1.0-DSIN(Y)
      Z=1.0-X
      ZA=(X+RO)/Z
      ZB=(1.0+RO)/(Z*Z)
      ZC=1.0-VF(ZA)/E
      ZD = 0.5*ZA*VD(ZA)/E
      ZD=ZA*(ZC-ZD)
      IF(ZC.ge.0) goto 12
      WRITE(2,1)ZC,E,ZA
1     FORMAT(/17H TROUBLE IN CSINF/1H,3D20.8/)
      STOP
   12 B=ZA*DSQRT(ZC)
      CALL ANGLE(E,B,OB,ZA,THETA,EC)
      RM = ZA
      ZA = DSIN(0.5*THETA)
      ZD = 2.0*ZD*ZA*ZA
      ZB = ZB*ZD
      ZC = DCOS(THETA)
      ZD=0.0
      X = DCOS(Y)
      DO 3 L=1,LMAX
      ZD=ZB+ZC*ZD
      FUN(L) = ZD*X
    3 continue
      RETURN
      END
      SUBROUTINE AFTERF(Y,FUN,LMAX)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C  CROSS-SECTION INTEGRAND FOR (B > OBED ) FOR (E > 1000*EC )
C
      COMMON/PIKS/RM,XX1,E,OB,RO,EC,XX2(4),BED,KX(2)
      DIMENSION FUN(LMAX)
      EXTERNAL VF,VD
      B=BED/Y
      CALL MINIM(OB,RO,E,B,RM)
      CALL ANGLE(E,B,OB,RM,THETA,EC)
      ZB = DSIN(0.5*THETA)
      ZB = 2.0*B*ZB*ZB*B/Y
      ZC = DCOS(THETA)
      ZD=0.0
      DO 1 L=1,LMAX
      ZD=ZB+ZC*ZD
      FUN(L)=ZD
    1 continue
      RETURN
      END
      SUBROUTINE SENF(B,FUN,LMAX)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C  CROSS-SECTION INTEGRAND FOR ( B < OBED ) FOR ( E > 1000*EC )
C     VALUES IN !CSUC! BLOCK ARE TAKEN THROUGH FROM ROUTINE CROSSINTEGRA
C     BLOCK !RMBLOCK! TAKES VALUE OF RM INTO INTEGRATE.
C
      DIMENSION FUN(LMAX)
      COMMON/PIKS/RM,XX1,E,OB,RO,EC,XX2(5),KX(2)
      EXTERNAL VF,VD
      CALL MINIM(OB,RO,E,B,RM)
      CALL ANGLE(E,B,OB,RM,THETA,EC)
      ZB = DSIN(0.5*THETA)
      ZB=2.0*B*ZB*ZB
      ZC = DCOS(THETA)
      ZD=0.0
      DO 1 L=1,LMAX
      ZD=ZB+ZC*ZD
      FUN(L)=ZD
    1 continue
      RETURN
      END
      SUBROUTINE MINIM (OB,RO,E,B,RM)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C     TO FIND THE APPROXIMATE POSITION OF RM,THE CLASSICAL TURNING POINT
C     FOR ONE B AND E.      ORBITING VALUES ARE IN COMMON BLOCK !ORB!.
C
      EXTERNAL VF,VD
      COMMON/ORB/EE(150),OBB(150),ROO(150),ELC,RLC,OBED,EDO,EC,NO,KNO
      DIMENSION RC(16),Y(16)
      RC=0.D0
      Y=0.D0
      DELR=1.25
   98 IF(RO .lt. 0 ) goto 21
      IF(RO .gt. 0 ) goto 2
      IF(RM.lt.0)  goto 51
      IF(RM.gt.0)  goto 16
      IF(E.gt.ELC)goto 62
      RM=RLC
      GO TO 16
   62 RA=2.0
      GO TO 15
   51 WRITE(2,81) OB,RO,E,B,RM
   81 FORMAT (21H0RM NEGATIVE IN MINIM  5(D20.5))
      STOP
C
    2 IF(OB.lt.B) goto 5
      IF(OB.gt.B) goto 3
C
      DELR=1.025
      GO TO 3
    5 IF(RM.gt.RO) goto 16
      RM=RO
      RA=RM
      YA=E-VF(RM)-E*B*B/(RM*RM)
      IF(YA.lt.0) goto 12
      IF(YA.eq.0) goto 44
      IF(YA.gt.0) goto 3
   16 RA=RM
      YA=E-VF(RA)-E*B*B/(RA*RA)
      IF(YA.eq.0)  goto 44
      IF(YA.gt.0)  goto 99
   12 RB=RA*DELR
      YB=E-VF(RB)-E*B*B/(RB*RB)
      IF(YB.lt.0) goto 10
      IF(YB.gt.0) goto 8
      RM=RB
      RETURN
   10 RA=RB
      YA=YB
      GO TO 12
    8 CONTINUE
      DO 17 J=1,6
      TR=(RA+RB)/2.0
      TY=E-VF(TR)-E*B*B/(TR*TR)
      IF(TY.lt.0) goto 36
      IF(TY.gt.0) goto 34
      RM=TR
      RETURN
   34 YB=TY
      RB=TR
      GO TO 17
   36 YA=TY
      RA=TR
   17 CONTINUE
      IF(YA+YB.le.0)  goto 74
      TR=RA
      TY=YA
      RA=RB
      YA=YB
      RB=TR
      YB=TY
   74 CONTINUE
      RC(1)=RA
      RC(2)=RB
      Y(1)=YA
      Y(2)=YB
      CALL  ZERO(RC,Y,B,E,RM)
      RETURN
C
    3 RA=RO/2.0
   15 YA=E-VF(RA)-E*B*B/(RA*RA)
      IF(YA.lt.0) goto 12
      IF(YA.eq.0) goto 44
      RA=RA/2.0
      GO TO 15
   21 WRITE(2,80) OB,RO,E,B,RM
   80 FORMAT (21HORO NEGATIVE IN MINIM ,/5(D20.5))
      STOP
   44 RM=RA
      RETURN
   99 RM=0.0
      GO TO 98
      END
      SUBROUTINE ZERO (R,Y,B,E,RM)
      IMPLICIT REAL*8 (A-H,O-Z)
C              THIS CALCULATES RM ACCURATELY FROM APPROX RM
C                     NO COMMON NECESSARY
      DIMENSION R(16), Y(16)
      IF(Y(1)*Y(2).eq.0) goto 18
      IF(Y(1)*Y(2).gt.0) goto 84
    6 N = 2
    3 CALL AITKEN (Y,R,0.0D0,R(N+1),N)
      J = 2
      IF(DABS(R(N)-R(N+1)).le.2.0D-08*R(N)) goto 1
      N=N+1
      RN=R(N)
      Y(N)=E-E*B*B/(RN*RN)-VF(RN)
      IF(Y(N).LE.0.0) J = N
      IF(Y(N).EQ.Y(N-1)) GO TO 4
      IF(N.le.9) goto 3
    4 RM = R(J)
      GO TO 33
    1 N=N+1
      RM=R(N)
   33 XT = E - VF(RM)
      IF(XT.le.0) goto 71
      BNEW = RM*DSQRT(XT/E)
      ACC = 0.001
      IF(DABS(B-BNEW).gt.ACC) goto 41
      B = BNEW
      RETURN
   71 BNEW = 0.0
      IF(-XT.LE.1.0E-8*E) RETURN
   41 WRITE(2,89) E,RM,B,BNEW
   89 FORMAT (51H TROUBLE IN ZERO, RM MAY BE WRONG, B NOT EQUAL BNEW  /
     113H  E,RM,B,BNEW  4F20.9)
      B = BNEW
      RETURN
   18 IF (Y(1).ne.0) goto 20
      RM=R(1)
      RETURN
   20 RM=R(2)
      RETURN
   84 WRITE (2,85)(R(I),Y(I),I=1,10)
   85 FORMAT(14H0 ERROR AITKEN4D20.8)
      GO TO 6
      END
      SUBROUTINE AITKEN (X,Y,XX,YY,N)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C     INDEPENDENT VARIABLE IN XX, LISTS IN X AND Y, N NUMBERS IN LIST
C  THIS ROUTINE INTERPOLATES IN THE LIST,PUTS THE ANSWER IN YY
C                                    NO COMMON
      DIMENSION X(16),Y(16),Z(16),X1(16)
      DO 2 I=1,N
      X1(I)=X(I)-XX
      Z(I)=Y(I)
    2 continue
      M=N-1
      DO 3 I=1,M
      K=I+1
      DO 4 J=K,N
      Z(J)=((Z(I)*X1(J))-Z(J)*X1(I))/(X1(J)-X1(I))
    4 continue
    3 CONTINUE
      YY=Z(N)
      RETURN
      END
      SUBROUTINE NEWZER(E,B,RB,RM)
      IMPLICIT REAL*8 (A-H,O-Z)
C  THIS RECALCULATES RM WHEN IT IS FOUND THAT THE PREVIOUS MINIM HAS
C  FAILED. FAILURE HAS OCCURRED AT RB
      F(R)=1.0-VF(R)/E-B*B/(R*R)
    4 IF(F(RB).le.0)  goto 3
      IF(F(RB).gt.0)  goto 1
    2 RM = RB
      RETURN
    1 RB=RB/2.0
      GO TO 4
    3 RB = RB*1.2
      IF(F(RB).lt.0) goto 3
      IF(F(RB).eq.0) goto 2
C WE HAVE NOW GOT RB > RM > RB/1.2
      RA = RB/1.2
   15 RM = 0.9*RA + 0.1*RB
      IF(DABS(RM-RA).le.0.000000002*RM) goto 6
      IF(F(RM).lt.0) goto 7
      IF(F(RM).gt.0) goto 9
      RETURN
    7 RA = RM
      GO TO 15
    9 RB = RM
      GO TO 15
C     WE NOW HAVE AN ACCURATE RM
    6 RM=RB
      RETURN
      END
      SUBROUTINE ANGLE(E,B,OB,RM,THETA,EC)
C
C  THIS CALCULATES THE CLASSICAL DEFLECTION ANGLE,THETA,
C  GIVEN  E,B,OB,RM,EC
C     N GIVES ORDER OF CLENSHAW-CURTIS USED IN ROUTINE INTEGRATE
C     VALUES IN BLOCK "CSUC" ARE TAKEN THROUGH FROM ROUTINE CROSSINTEGRA
C     WHICH EVALUATES CROSSECTION INTEGRALS
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/PIKS/XXX1,ACC,YE,YOB,RO,YEC,EE,BB,RMM,RFAIL,XXX2,KXX,KXY
      EXTERNAL G,GA,GB,VF,VD
      PI=DACOS(-1.D0)
   11 RFAIL = 0
      EE = E
      BB = B
      RMM = RM
      EB = 1.0/RM
      ZA = RM*RM*RM
      VDRM = VD(RM)
      ZA = B*B-0.5*ZA*VDRM/E
      VDRM = ZA
      IF (VDRM.gt.0) goto 16
      WRITE(2,17) RM,VDRM,B,E
   17 FORMAT(65H EFFECTIVE POTENTIAL INCREASING AT RM. IS POTENTIAL SMOO
     1TH AT RM? //4H RM=,D20.10,3X,5HVDRM=,D20.10,3X,2HB=,D20.10,3X,2HE=
     2,D20.10)
      RFAIL = RM
      CALL NEWZER(E,B,RFAIL,RM)
      WRITE(2,67)RM
   67 FORMAT(28H CORRECTION MADE . NOW RM = , D20.10)
      GO TO 11
   16 CONTINUE
      EA = 1.0/DSQRT(ZA)
      IF(DABS(EC-E) .gt. EC*1.0D-04) goto 3
      IF(DABS(OB-B) .gt. 0.1D0*OB) goto 4
      NMIN = 128
      GO TO 5
    3 IF(E.LT.1.1*EC.AND.B.LT.OB) GO TO 6
    4 NMIN = 8
    5 CONTINUE
      CALL ENTEGR(0.0D0,0.5D0*PI,ACC,ANS,4,
     *            EA,EB,G,NMIN,256,IOK,N,THO)
      GO TO 9
    6 CONTINUE
      IF(E.LE.EC.AND.RM.GT.RO) GO TO 8
      IF(RM.GT.RO) GO TO 4
      EA = 0.0
      EB = 0.0
      RMSRO=RM/RO
      THO = DATAN(DSQRT(1.0D0/(RMSRO*RMSRO)-1.0D0))
      CALL ENTEGR(0.0D0,0.5D0*PI,ACC,ANSA,4,EA,EB,GA,8,256,IOK,N,THO)
       CALL ENTEGR(.0D0,.5D0*PI,ACC,ANSB,4,EA,EB,GB,8,256,IOK,N,THO)
      ANS = ANSA + ANSB
    9 CONTINUE
      IF(RFAIL.gt.0) goto 2
      THETA = PI - 2.0*B*ANS
      RETURN
   2  CALL NEWZER(E,B,RFAIL,RM)
      GO TO 11
    8 WRITE(2,77)
   77 FORMAT(74H RM GREATER THAN RO THOUGH B LESS THAN OB. IS THE POTENT
     1IAL SMOOTH AT RO ?  )
      WRITE(2,7) E,RM,RO,B,OB
    7 FORMAT(3H E=,D17.8,3X,3HRM=,D17.8,3X,3HRO=,D17.8,3X,2HB=,D17.8,3X,
     13HOB=,D17.8 )
      GO TO 4
      END
      SUBROUTINE ENTEGR(A,B,ACC,ANS,NEND,EA,EB,F,NMIN,NMAX,IOK,N,THO)
C
C  INTEGRATES ONE INTEGRAND F(X) FROM  A TO B USING ALL  CLENSHAW
C  CURTIS  PIVOTS; LOGIC AS IN INTEGRATE;CALLED ONLY IN ANGLE
C     VALUES IN "CLCU" BLOCK HOLD CLENSHAW-CURTIS WEIGHTS,PIVOTS ETC.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/CLCU/X(127),WTS(261),X2(127),X4(127),COF(7),NA(7)
      DIMENSION FUN(127)
      EXTERNAL VF
      ERR = ACC
      IOK = 1
      HAF = 0.5*(B-A)
      AMID = 0.5*(B+A)
      GO TO(331,1,2,3),NEND
331   EA = F(A,THO)
    1 EB = F(B,THO)
      GO TO 3
    2 EA = F(A,THO)
    3 CENT = F(AMID,THO)
      ZA = HAF*X(64)
      ZB = AMID - ZA
      ZA = AMID + ZA
      FUN(1) = F(ZA,THO) + F(ZB,THO)
      END = EA+EB
      NORDER = 2
      N = 8
      PREANS = HAF*(WTS(1)*END+WTS(2)*FUN(1)+WTS(3)*CENT)
      PREST = 32.0D0*HAF*DABS(0.5D0*END-FUN(1)+CENT)/105.0D0
      PREST = PREST/PREANS
    9 LC = N/4-1
      LA = 2*LC
      LB = LC
      DO 6 J = 1,LB
       FUN(LA) = FUN(LC)
      LA = LA -2
      LC = LC - 1
    6 continue
      LA = 1
      LB = 256/N
      NXD=N/4
      DO 8 J=1,NXD
      P = X(LA*LB)*HAF
      ZA = AMID - P
      ZB = AMID + P
      FUN(LA) = F(ZA,THO)+F(ZB,THO)
      LA = LA + 2
    8 continue
      M = NA(NORDER)
      ANS = WTS(M)*END + WTS(M+N/2)*CENT
      AN = 0.5*END + CENT
      AN2 = 0.5 *END-CENT
      W = -1.0
      NXC=N/2-1
      DO 12 J=1,NXC
      AN = AN+ W*FUN(J)
      AN2 = AN2 + W*X2(J*LB)*FUN(J)
      W = -W
      ANS = ANS + WTS(M+J)*FUN(J)
   12 continue
      AN = 2.0*HAF*DABS(AN)/N
      AN2 = HAF*DABS(AN2)/N
      ANS = HAF*ANS
      AMAX = AN
      IF(AN2.GT.AMAX)AMAX = AN2
      EST = COF(NORDER)*AMAX
      EST = DABS(EST/ANS)
      IF(N .lt. NMIN) goto 16
14    IF(EST .gt. ERR) goto 16
      GO TO(15,333),IOK
333   RETURN
   15 IF(AN.LE.AN2.AND.DABS(1.0-ANS/PREANS).LE.PREST) RETURN
      ERR = 0.1*ERR
      IOK = 2
      GO TO 14
   16  N = 2*N
      NORDER = NORDER + 1
      PREANS = ANS
      PREST = EST
      IF(N.le.NMAX) goto 9
      IOK = 3
      RETURN
      END
      DOUBLE PRECISION FUNCTION G(X,THO)
C
C  COLLISION ANGLE INTEGRAND
C     VALUES IN BLOCK "ANGEL" ARE TAKEN THROUGH FROM ROUTINE ANGLE;
C     RFAIL IS USED TO RETRIEVE SITUATION IN EVENT OF A FAILURE WHEN
C     ROUTINE NEWZERO WILL BE USED
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/PIKS/XX(6),E,B,RM,RFAIL,XX7,KX1,KX2
      EXTERNAL VF
      ZA = THO ! SUPPRESS WARNING
      ZA= DSIN(X)/RM
      ZB = RM/DCOS(X)
      GEN=1.0-(B*B)/(ZB*ZB)-VF(ZB)/E
      IF(GEN.le.0) goto 1
      ENERG = DSQRT(GEN)
      GO TO 10
   1  IF(ZB.le.RFAIL) goto 3
      RFAIL = ZB
    3 ENERG=1.0
   10 G=ZA/ENERG
      RETURN
      END
      DOUBLE PRECISION FUNCTION GA(X,THO)
C
C  PART OF INTEGRAND FOR ANGLE WHEN B< OB AND E .LE. EC
C     THO IS FROM ANGLE ROUTINE
C
      IMPLICIT REAL*8 (A-H,O-Z)
      EXTERNAL VF
      ZS = THO*DSIN(X)
      ZC = THO*DCOS(X)
      GA = ZS*G(ZC,XX)
      RETURN
      END
      DOUBLE PRECISION FUNCTION GB(X,THO)
C
C  ALONG WITH GA ,MAKES UP INTEGRAND FOR ANGLE FOR B < OB AND E .LE. EC
C     THO IS VALUE FROM ANGLE ROUTINE
C
      IMPLICIT REAL*8 (A-H,O-Z)
      EXTERNAL VF
      PI=DACOS(-1.D0)
      ZC = 0.5*PI
      ZS = ZC-THO
      ZC = ZC - ZS*DCOS(X)
      ZS = ZS*DSIN(X)
      GB = ZS*G(ZC,XX)
      RETURN
      END
      SUBROUTINE INTERP(XIN,YANS,X,Y,NPOINT, K )
C
C  THIS INTERPOLATES IN THE TABLE X,Y TO FIND YANS CORRESPONDING TO XIN
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION X(NPOINT),Y(NPOINT),EXX(16),ROXX(16)
C  K IS THE SMALLEST INTEGER GREATER THAN THE POINT BEING INTERPOLATED
      NPM1=NPOINT-1
      IF(XIN .le. X(2)) goto 10
      IF(XIN .ge. X(NPM1)) goto 15
      IF (K .ge. 3) goto 44
      K = 3
   44 IF(XIN .le. X(K)) goto 23
      K=K+1
      IF(K.le.NPOINT) goto 44
      IF(K.gt. NPOINT) goto 115
   23 IF(XIN .ge. X(K-1)) goto 13
      K=K-1
      GO TO 23
   13 DO 16 J=1,4
      KK = K+J-3
      EXX(J)  = X(KK)
      ROXX(J) = Y(KK)
   16 CONTINUE
      CALL AITKEN (EXX,ROXX,XIN,YANS, 4)
      RETURN
   10 DO 17 J = 1,3
      EXX(J) = X(J)
      ROXX(J) = Y(J)
   17 continue
      GO TO 181
   15 DO 19 J = 1,3
      JJ = J + NPOINT - 3
      EXX(J) = X(JJ)
      ROXX(J) = Y(JJ)
   19 continue
  181 CALL AITKEN (EXX,ROXX,XIN,YANS,  3)
      RETURN
  115 Z=(Y(NPOINT)-Y(NPM1))/(X(NPOINT)-X(NPM1))
      YANS=Z*(XIN-X(NPOINT))+Y(NPOINT)
      RETURN
      END
      SUBROUTINE CHEB(X,J,TJ)
C  CALCULATES  CHEBYSHEV  POLYNOMIAL  , DEGREE (J-1)  AT   X
      IMPLICIT REAL*8 (A-H,O-Z)
      IF (J.eq.2) goto 2
      IF (J.gt.2) goto 3
      TJ=1.0
      RETURN
    2 TJ=X
      RETURN
    3 A=1.0
      B=X
      JJ=J-2
      DO 4 I=1,JJ
      C=2.0*X*B-A
      A=B
      B=C
    4 continue
      TJ=B
      RETURN
      END

      SUBROUTINE PREOMEGA
        !{{{
C
C  THIS CALCULATES AND PRINTS OUT THE COLLISION INTEGRALS OMEGA(L,S)
C  AND THE COLLISION RATIOS(WHEN MAXIMUM L AND MAXIMUM S ARE LARGE
C  ENOUGH ).
C     TI ^ KS,TEMPERATURE T ^ S,ARE NEEDED IN UMFA ^ UMFB TO DEFINE
C     COLLISION INTEGRAL INTEGRAND.
C     KSI,ISK ARE MARKERS FOR INTEGRATING ROUTINE
C     VARIABLES IN BLOCK "PIE" HOLD INPUTTED VALUES OF TEMPERATURES,ENER
C     NC HOLDS THE NUMBER OF CHEBYSHEV COEFFICIENTS CO WHEN THE CROSSECT
C     FITTED IN THE 3 ENERGY REGIONS
C     EC2 IS ENERGY DIVIDING THE SECOND AND THIRD REGOINS.
C     ALEC ETC. ARE THE LOGS OF THE ENERGIES BOUNDING THE 3 ENERGY REGIO
C
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      COMMON/ORB/XXX(454),EC,NX(2)
      COMMON/PIE/EMIN,EMAX,TMIN,TMAX,T(60),ACC,E(60),
     *CO(33,MAXORD,3),EC2,ALEC
     *,ALEMIN,ALEMAX,ALEC2,TI,NC(3),NT,MAXL,MAXS,NE,KS
      COMMON/PIKS/XX(11),KSI,ISK
      COMMON/OMOM/Z(MAXORD),AA(MAXORD),D(MAXORD),EA(MAXORD),
     *OM(MAXORD,MAXORD),EB(MAXORD),ZZ(MAXORD),TIM,TIN
      ! DIMENSION Z(6),AA(6),D(6),EA(6),OM(6,6),EB(6),ZZ(6)
C
C  PARAMETERS FOR QF ROUTINE CALCULATED HERE
      PI=DACOS(-1.D0)
      IF(EC.GT.0.0) ALEC=DLOG(EC)
      ALEMIN = DLOG(EMIN)
      ALEMAX = DLOG(EMAX)
      IF(EC2.GT.0.0) ALEC2 = DLOG(EC2)
      IF(NT.EQ.0) RETURN
C
C  CONSTANTS AND PARAMETERS ARE GENERATED
      ISK = 1
      KSI = 1
      TIM = 0.0
      TIN = 1.0
      PI2=PI/2.0
      KKK = -1
      DO 11 J = 1, MAXL
      K = 1+J
      KK = 1+2*J-KKK
      RLKK=KK
      RLK2=K+K
      D(J)=PI*RLKK/RLK2
      KKK = -KKK
   11 continue
      FAC = 2.0
      DO 12 J = 1, MAXS
      AA(J) = 1.0/FAC
      RJ2=J+2
      FAC=FAC*RJ2
   12 continue
      WRITE(2,53)
   53 FORMAT(1H1)
      WRITE(2,55)
   55 FORMAT(15X,83H COLLISION RATIOS;IF MAXIMUM L AND S NOT LARGE ENOUG
     1H THEN RATIOS REPLACED BY ZEROS   )
      ! }}}
      END SUBROUTINE PREOMEGA

      SUBROUTINE OMEGA(TT)
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      COMMON/ORB/XXX(454),EC,NX(2)
      COMMON/PIE/EMIN,EMAX,TMIN,TMAX,T(60),ACC,E(60),
     *CO(33,MAXORD,3),EC2,ALEC
     *,ALEMIN,ALEMAX,ALEC2,TI,NC(3),NT,MAXL,MAXS,NE,KS
      COMMON/PIKS/XX(11),KSI,ISK
      COMMON/OMOM/Z(MAXORD),AA(MAXORD),D(MAXORD),EA(MAXORD),
     *OM(MAXORD,MAXORD),EB(MAXORD),ZZ(MAXORD),TIM,TIN
      ! DIMENSION Z(6),AA(6),D(6),EA(6),OM(6,6),EB(6),ZZ(6)
      EXTERNAL UMFA,UMFB
      EXTERNAL VF,VD
      PI=DACOS(-1.D0)
      ! STARTING HERE, SOME REAL OMEGA COMPUTING
C
C  TEMPERATURES ARE CHOSEN , ONE AT A TIME
      TI=TT
      OM=9999999.D0 ! DEBUG
      ! GIVE OMEGAS A VERY WIERD VALUE SO WE CAN FIND THE
      ! BUG IF THERE IS ANY
      ! OM=0.0D0
      DO 102 KS = 1, MAXS
      DO 100 II = 1,MAXL
      EB(II) = 0.0
      EA(II) = 0.0
  100 continue
      LMAX = MAXL
      IF(KS.ge.LMAX) goto 5
      LMAX = KS
    5 CONTINUE
      KSI = 1
      S1 = 1.0 + KS
C
C  WE INTEGRATE FROM 0 TO (S+1)
      CALL INTEGR(TIM,S1,ACC,Z,LMAX,2,EA,EB,UMFA,8,64,IOK)
      KSI = 2
C
C  WE INTEGRATE FROM (S+1) TO INFINITY
      CALL INTEGR(TIM,TIN,0.1*ACC,ZZ,LMAX,2,EA,EB,UMFB,8,64,IOK)
      DO 2 L=1,LMAX
      Z(L)=Z(L)+ZZ(L)
      OM(L,KS) = Z(L)*AA(KS)/D(L)
    2 continue
  102 continue
C
C  ALL OMEGA(L,S) CALCULATED, RATIOS ARE NOW CALCULATED
      A=OM(2,2)/OM(1,1)
      IF(MAXS.GT.2) B=(5.0*OM(1,2)-4.0*OM(1,3))/OM(1,1)
      C=OM(1,2)/OM(1,1)
      IF((MAXL-1)*(MAXS-1).le.0) goto 6
      ER=OM(2,3)/OM(2,2)
      G=OM(4,4)/OM(2,2)
    6 F=OM(3,3)/OM(1,1)
C
C  PRINT-OUT OF RESULTS FOR EACH T
      WRITE(2,81) TI
   81 FORMAT(26X,46H REDUCED COLLISION INTEGRALS FOR TEMPERATURE =,F20.6
     1//19X3HS=1,15X3HS=2,15X3HS=3,15X3HS=4,15X3HS=5,15X3HS=6 /)

      WRITE(2,*) "OMEGA*"
      DO L = 1, MAXORD
        WRITE(2,"(100G10.2)") OM(L, :)
      ENDDO
!     DO 7 L = 1, MAXL
!     GO TO (21,22,23,24,25,26),L
!  21 WRITE(2,91) L,(OM(L,KS),KS=L,MAXS)
!  91 FORMAT(3H L=,I1,    1PD18.6,1PD18.6,1PD18.6,1PD18.6,1PD18.6,
!    1  1PD18.6)
!     GO TO 7
!  22 WRITE(2,92) L,(OM(L,KS),KS=L,MAXS)
!  92 FORMAT(3H L=,I1,18X,1PD18.6,1PD18.6,1PD18.6,1PD18.6,1PD18.6)
!     GO TO 7
!  23 WRITE(2,93) L,(OM(L,KS),KS=L,MAXS)
!  93 FORMAT(3H L=,I1,36X,1PD18.6,1PD18.6,1PD18.6,1PD18.6)
!     GO TO 7
!  24 WRITE(2,94) L,(OM(L,KS),KS=L,MAXS)
!  94 FORMAT(3H L=,I1,54X,1PD18.6,1PD18.6,1PD18.6)
!     GO TO 7
!  25 WRITE(2,95) L,(OM(L,KS),KS=L,MAXS)
!  95 FORMAT(3H L=,I1,72X,1PD18.6,1PD18.6)
!     GO TO 7
!  26 WRITE(2,96) L,(OM(L,KS),KS=L,MAXS)
!  96 FORMAT(3H L=,I1,90X,1PD18.6)
!   7 CONTINUE
!     WRITE(2,85) A,B,C,ER,F,G
!  85 FORMAT(1H //7X,1HA,11X,1HB,10X,1HC,10X,1HE,10X,1HF,10X,1HG /
!    1  6F11.5 ///)

      RETURN
      END
      SUBROUTINE UMFA(X,FUN,LMAX)
C
C     COLLISION INTEGRAL INTEGRAND FOR^X < (S + 1)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      DIMENSION FUN(LMAX),Q(LMAX)
      COMMON/PIE/XX(125),CX(33,MAXORD,3),XY(5),TI,NX(7),KS
      ZA = DEXP(-X)*X**(1+KS)
      XT = TI*X
      CALL QF(XT,Q,LMAX)
      DO 1 L= 1,LMAX
      FUN(L) = ZA*Q(L)
    1 continue
      RETURN
      END
      SUBROUTINE UMFB(Y,FUN,LMAX)
C
C     COLLISION INTEGRAL FOR X>(S+1)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      DIMENSION FUN(LMAX),Q(LMAX)
      COMMON/PIE/XX(125),CX(33,MAXORD,3),XY(5),TI,NX(7),KS
      S1 = 1.0+KS
      X = S1/Y
      ZB = X/Y
      ZA = DEXP(-X)*X**(1+KS)
      XT = X*TI
      ZB = ZB*ZA
      CALL QF(XT,Q,LMAX)
      DO 1 L = 1,LMAX
      FUN(L) = ZB*Q(L)
    1 continue
      ZA = ZA*Q(1)
      RETURN
      END
      SUBROUTINE QF(E,QA,LMAX)
C
C  THIS CALCULATES THE COLLISION CROSS-SECTIONS QA(L) FOR L BETWEEN
C  1 AND LMAX FOR ANY ENERGY E BY SUMMING THE CHEBYSHEV SERIES
C
      IMPLICIT REAL*8 (A-H,O-Z)
      ! INTEGER, PARAMETER :: MAXORD=20
      COMMON/ORB/XXX(454),EC,NY(2)
      COMMON/PIE/XX(125),C(33,MAXORD,3),
     *EC2,ALEC,ALEMIN,ALEMAX,ALEC2,TI,NC(3)
     *,NX(5)
      DIMENSION QA(LMAX)
      IF(EC.gt.0) goto 4
      J=3
      EA = ALEMIN
      EB = ALEMAX
      GO TO 3
    4 CONTINUE
      IF(E.gt.EC) goto 1
      J=1
      EA=ALEMIN
      EB=ALEC
      GO TO 3
   1  IF(E.gt.EC2) goto 2
      J=2
      EA=ALEC
      EB=ALEC2
      GO TO 3
    2 J=3
      EA=ALEC2
      EB=ALEMAX
    3 EL = DLOG(E)
      EL = -1.0 + 2.0*(EL - EA)/(EB - EA)
      N=NC(J)
      DO 6 L=1,LMAX
      A=0.0
      B=0.5*C(N,L,J)
      DO 11  JJ=2,N
      I=N+1-JJ
      CC=2.0*EL*B-A+C(I,L,J)
      A=B
      B=CC
   11 continue
      QA(L)=B-EL*A   -0.5*C(1,L,J)
      QA(L) = DEXP(QA(L))
    6 continue
      RETURN
      END
